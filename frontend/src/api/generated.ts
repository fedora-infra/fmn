/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/users/me": {
    /** Get Me */
    get: operations["get_me_api_v1_users_me_get"];
  };
  "/api/v1/users": {
    /** Get Users */
    get: operations["get_users_api_v1_users_get"];
  };
  "/api/v1/users/{username}/info": {
    /** Get User Info */
    get: operations["get_user_info_api_v1_users__username__info_get"];
  };
  "/api/v1/users/{username}/groups": {
    /** Get User Groups */
    get: operations["get_user_groups_api_v1_users__username__groups_get"];
  };
  "/api/v1/users/{username}/destinations": {
    /** Get User Destinations */
    get: operations["get_user_destinations_api_v1_users__username__destinations_get"];
  };
  "/api/v1/users/{username}/rules": {
    /** Get User Rules */
    get: operations["get_user_rules_api_v1_users__username__rules_get"];
    /** Create User Rule */
    post: operations["create_user_rule_api_v1_users__username__rules_post"];
  };
  "/api/v1/users/{username}/rules/{id}": {
    /** Get User Rule */
    get: operations["get_user_rule_api_v1_users__username__rules__id__get"];
    /** Edit User Rule */
    put: operations["edit_user_rule_api_v1_users__username__rules__id__put"];
    /** Delete User Rule */
    delete: operations["delete_user_rule_api_v1_users__username__rules__id__delete"];
  };
  "/api/v1/applications": {
    /** Get Applications */
    get: operations["get_applications_api_v1_applications_get"];
  };
  "/api/v1/artifacts": {
    /**
     * Get Artifacts 
     * @description This handler queries artifacts from Pagure
     * 
     * Proxying Pagure queries lets the API cache results to reduce load on the
     * backend service.
     * 
     * :param names: Name patterns of artifacts which should be returned
     * 
     * :param users: Names of users whose artifacts should be returned
     * 
     * :param groups: Names of groups whose artifacts should be returned
     */
    get: operations["get_artifacts_api_v1_artifacts_get"];
  };
  "/api/v1/healthz/live": {
    /** Liveness Check */
    get: operations["liveness_check_api_v1_healthz_live_get"];
  };
  "/api/v1/healthz/ready": {
    /** Readiness Check */
    get: operations["readiness_check_api_v1_healthz_ready_get"];
  };
  "/api/v1/admin/rules": {
    /** Get Rules */
    get: operations["get_rules_api_v1_admin_rules_get"];
  };
  "/api/v1/admin/users": {
    /** Get Users */
    get: operations["get_users_api_v1_admin_users_get"];
  };
  "/api/v1/admin/rules/{id}": {
    /** Patch Rule */
    patch: operations["patch_rule_api_v1_admin_rules__id__patch"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Artifact */
    Artifact: {
      type: components["schemas"]["ArtifactType"];
      /** Name */
      name: string;
    };
    /**
     * ArtifactType 
     * @description An enumeration. 
     * @enum {unknown}
     */
    ArtifactType: "rpms" | "containers" | "modules" | "flatpaks";
    /** ArtifactsFollowedTrackingRule */
    ArtifactsFollowedTrackingRule: {
      /**
       * Name 
       * @enum {string}
       */
      name: "artifacts-followed";
      /** Params */
      params: ({
          [key: string]: string | undefined;
        })[];
    };
    /** Destination */
    Destination: {
      /** Protocol */
      protocol: string;
      /** Address */
      address: string;
    };
    /** Filters */
    Filters: {
      /**
       * Applications 
       * @default []
       */
      applications?: (string)[];
      /**
       * Severities 
       * @default []
       */
      severities?: (string)[];
      /** Topic */
      topic?: string;
      /**
       * My Actions 
       * @default false
       */
      my_actions?: boolean;
    };
    /** GenerationRule */
    GenerationRule: {
      /** Id */
      id?: number;
      /** Destinations */
      destinations: (components["schemas"]["Destination"])[];
      filters: components["schemas"]["Filters"];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** ListParamTrackingRule */
    ListParamTrackingRule: {
      /**
       * Name 
       * @enum {string}
       */
      name: "artifacts-owned" | "artifacts-group-owned" | "users-followed";
      /** Params */
      params: (string)[];
    };
    /** NewRule */
    NewRule: {
      /** Name */
      name: string;
      /**
       * Disabled 
       * @default false
       */
      disabled?: boolean;
      /** Tracking Rule */
      tracking_rule: components["schemas"]["ListParamTrackingRule"] | components["schemas"]["NoParamTrackingRule"] | components["schemas"]["ArtifactsFollowedTrackingRule"];
      /** Generation Rules */
      generation_rules: (components["schemas"]["GenerationRule"])[];
    };
    /** NoParamTrackingRule */
    NoParamTrackingRule: {
      /**
       * Name 
       * @enum {string}
       */
      name: "related-events";
      /** Params */
      params?: string;
    };
    /** Rule */
    Rule: {
      /** Name */
      name: string;
      /**
       * Disabled 
       * @default false
       */
      disabled?: boolean;
      /** Tracking Rule */
      tracking_rule: components["schemas"]["ListParamTrackingRule"] | components["schemas"]["NoParamTrackingRule"] | components["schemas"]["ArtifactsFollowedTrackingRule"];
      /** Generation Rules */
      generation_rules: (components["schemas"]["GenerationRule"])[];
      /** Id */
      id: number;
      user: components["schemas"]["User"];
      /**
       * Generated Last Week 
       * @default 0
       */
      generated_last_week?: number;
    };
    /** RulePatch */
    RulePatch: {
      /** Disabled */
      disabled?: boolean;
    };
    /** User */
    User: {
      /** Id */
      id?: number;
      /** Name */
      name: string;
      /**
       * Is Admin 
       * @default false
       */
      is_admin?: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Get Me */
  get_me_api_v1_users_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Get Users */
  get_users_api_v1_users_get: {
    parameters: {
      query: {
        search?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Info */
  get_user_info_api_v1_users__username__info_get: {
    parameters: {
      path: {
        username: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Groups */
  get_user_groups_api_v1_users__username__groups_get: {
    parameters: {
      path: {
        username: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Destinations */
  get_user_destinations_api_v1_users__username__destinations_get: {
    parameters: {
      path: {
        username: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Destination"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Rules */
  get_user_rules_api_v1_users__username__rules_get: {
    parameters: {
      path: {
        username: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Rule"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create User Rule */
  create_user_rule_api_v1_users__username__rules_post: {
    parameters: {
      path: {
        username: Record<string, never>;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewRule"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Rule"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User Rule */
  get_user_rule_api_v1_users__username__rules__id__get: {
    parameters: {
      path: {
        username: string;
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Rule"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Edit User Rule */
  edit_user_rule_api_v1_users__username__rules__id__put: {
    parameters: {
      path: {
        username: string;
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rule"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Rule"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User Rule */
  delete_user_rule_api_v1_users__username__rules__id__delete: {
    parameters: {
      path: {
        username: string;
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Applications */
  get_applications_api_v1_applications_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  /**
   * Get Artifacts 
   * @description This handler queries artifacts from Pagure
   * 
   * Proxying Pagure queries lets the API cache results to reduce load on the
   * backend service.
   * 
   * :param names: Name patterns of artifacts which should be returned
   * 
   * :param users: Names of users whose artifacts should be returned
   * 
   * :param groups: Names of groups whose artifacts should be returned
   */
  get_artifacts_api_v1_artifacts_get: {
    parameters: {
      query: {
        names?: (string)[];
        users?: (string)[];
        groups?: (string)[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Artifact"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Liveness Check */
  liveness_check_api_v1_healthz_live_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Readiness Check */
  readiness_check_api_v1_healthz_ready_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Get Rules */
  get_rules_api_v1_admin_rules_get: {
    parameters: {
      query: {
        disabled?: boolean;
        username?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Rule"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Users */
  get_users_api_v1_admin_users_get: {
    parameters: {
      query: {
        search?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["User"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Rule */
  patch_rule_api_v1_admin_rules__id__patch: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RulePatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Rule"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
